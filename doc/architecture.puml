@startuml
title UNO Game Architecture

' Enum for Card Color
enum Color {
  Red
  Yellow
  Green
  Blue
}

' Enum for Card Value (numbered and action cards)
enum CardValue {
  Number(u8)
  Reverse
  Skip
  DrawTwo
}

' Class representing a Card with a color and value
class Card {
  + Color color
  + CardValue value
}

' Deck class manages the draw and discard piles, along with methods to draw, discard, and reshuffle cards.
class Deck {
  + Vec<Card> draw_pile
  + Vec<Card> discard_pile
  + draw(): Option<Card>
  + discard(card: Card)
  + reshuffle()
  + get_top_discard(): Card
}

' Player class represents a player with an id and a hand of cards. Players can only draw or play cards.
class Player {
  + usize id
  + Vec<Card> hand
  + draw_card(deck: Deck)
  + play_card(card_index: usize): Card
}

' Game class manages the flow of the game including the players, deck, and current player index.
' The direction is now a boolean: true for Clockwise, false for Counterclockwise.
class Game {
  + Vec<Player> players
  + Deck deck
  + usize current_player_index
  + bool direction
  + play_turn(player: Player, card_index: usize): bool
  + next_player()
  + reverse_direction()
  + is_valid_play(card: Card): bool
}

' Relationships
Card --> Color : has >
Card --> CardValue : has >
Deck --> Card : contains >
Player --> Card : holds >
Player --> Deck : interacts >
Game --> Player : contains >
Game --> Deck : uses >
Game --> "1" Card : uses >

' Documentation as comments
note right of Card
  Represents individual cards in the game.
  A Card has a Color (Red, Yellow, Green, Blue)
  and a CardValue (number or action like Reverse, Skip, or DrawTwo).
end note

note right of Deck
  Manages the draw and discard piles.
  - draw() returns the top card from the draw pile.
  - discard(card) adds a card to the discard pile.
  - reshuffle() reshuffles the discard pile into the draw pile when empty.
  - get_top_discard() returns the top card of the discard pile.
end note

note right of Player
  Represents a player in the game.
  - Each player has a hand (Vec<Card>).
  - Can draw a card or play a card.
  - play_card(card_index: usize) takes an index into the hand and returns the corresponding Card.
end note

note right of Game
  Orchestrates the game logic.
  - direction is a boolean (true = Clockwise, false = Counterclockwise).
  - play_turn(player, card_index) processes the player's move.
  - Validates the card through is_valid_play().
  - Returns true if the move is valid, false if not.
  - next_player() moves to the next player based on direction.
  - reverse_direction() switches between clockwise and counterclockwise by toggling the boolean.
end note

@enduml
